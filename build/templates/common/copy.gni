# Copyright (C) 2021-2023 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("$build_root/templates/metadata/module_info.gni")
template("ohos_copy") {
  assert(defined(invoker.sources),
         "sources must be defined for ${target_name}.")
  assert(defined(invoker.outputs),
         "outputs must be defined for ${target_name}.")

  bypass_module_info_generation =
      defined(invoker.bypass_module_info_generation) &&
      invoker.bypass_module_info_generation
  main_target_name = target_name
  target_label = get_label_info(":${main_target_name}", "label_with_toolchain")
  assert(target_label != "")  # used

  if (defined(invoker.subsystem_name) && defined(invoker.part_name)) {
    subsystem_name = invoker.subsystem_name
    part_name = invoker.part_name
  } else if (defined(invoker.subsystem_name)) {
    subsystem_name = invoker.subsystem_name
    part_name = subsystem_name
  } else {
    subsystem_name = "common"
    part_name = subsystem_name
  }
  assert(subsystem_name != "")  #used
  assert(part_name != "")  # used

  deps_ = []
  if (defined(invoker.deps)) {
    deps_ += invoker.deps
  }

  if (!bypass_module_info_generation) {
    module_info_target = "${main_target_name}_info"
    generate_module_info(module_info_target) {
      forward_variables_from(invoker,
                             [
                               "module_install_name",
                               "relative_install_dir",
                               "module_source_dir",
                             ])
      module_name = main_target_name
    }
  }

  copy(target_name) {
    forward_variables_from(invoker,
                           [
                             "outputs",
                             "sources",
                           ])
    deps = deps_

    if (!bypass_module_info_generation) {
      _install_module_info = {
        module_def = target_label
        module_info_file =
            rebase_path(get_label_info(target_label, "target_out_dir"),
                        root_build_dir) +
            "/${main_target_name}_module_info.json"
        subsystem_name = subsystem_name
        part_name = part_name
        toolchain = current_toolchain
        toolchain_out_dir = rebase_path(root_out_dir, root_build_dir)
      }

      metadata = {
        install_modules = [ _install_module_info ]
      }
    }
  }
}
