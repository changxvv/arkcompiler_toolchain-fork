# Copyright (c) 2022 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("$build_root/toolchain/toolchain.gni")

declare_args() {
  treat_warnings_as_errors = true
}

config("rtti") {
  if (is_win) {
    cflags_cc = [ "/GR" ]
  } else {
    cflags_cc = [ "-frtti" ]
  }
}

config("exceptions") {
  if (is_win) {
    # Enables exceptions in the STL.
    if (!use_custom_libcxx) {
      defines = [ "_HAS_EXCEPTIONS=1" ]
    }
    cflags_cc = [ "/EHsc" ]
  } else {
    cflags_cc = [ "-fexceptions" ]
  }
}

config("no_exceptions") {
  if (is_win) {
    # Disables exceptions in the STL.
    # libc++ uses the __has_feature macro to control whether to use exceptions,
    # so defining this macro is unnecessary. Defining _HAS_EXCEPTIONS to 0 also
    # breaks libc++ because it depends on MSVC headers that only provide certain
    # declarations if _HAS_EXCEPTIONS is 1. Those MSVC headers do not use
    # exceptions, despite being conditional on _HAS_EXCEPTIONS.
    if (!use_custom_libcxx) {
      defines = [ "_HAS_EXCEPTIONS=0" ]
    }
  } else {
    cflags_cc = [ "-fno-exceptions" ]
  }
}

# default_warnings ------------------------------------------------------------
#
# Collects all warning flags that are used by default.This way these
# flags are guaranteed to appear on the compile command line after -Wall.
config("default_warnings") {
  cflags = []
  cflags_cc = []
  ldflags = []

  if (is_win) {
    cflags += [
      "/W3",  # Warning level 3.
      "/wd4800",  # Disable warning when forcing value to bool.
      "/wd4267",  # size_t to int.
      "/wd4996",  # Deprecated function warning.
    ]
    defines += [
      "_CRT_NONSTDC_NO_WARNINGS",
      "_CRT_NONSTDC_NO_DEPRECATE",
    ]
  } else {
    if (treat_warnings_as_errors && is_clang) {
      cflags += [ "-Werror" ]
      ldflags = [ "-Werror" ]
    }
    if (is_clang) {
      cflags += [ "-Wall" ]
    }
  }

  if (is_clang) {
    cflags += [
      # Lots of third-party libraries have unused variables. Instead of
      # suppressing them individually, we just blanket suppress them here.
      "-Wno-unused-variable",
    ]
  }

  # Suppress warnings about ABI changes on ARM (Clang doesn't give this
  # warning).
  if (current_cpu == "arm" && !is_clang) {
    cflags += [ "-Wno-psabi" ]
  }

  if (!is_clang) {
    cflags_cc += [
      # See comment for -Wno-c++11-narrowing.
      "-Wno-narrowing",
    ]

    # -Wunused-local-typedefs is broken in gcc,
    # https://gcc.gnu.org/bugzilla/show_bug.cgi?id=63872
    cflags += [ "-Wno-unused-local-typedefs" ]

    # Don't warn about "maybe" uninitialized. Clang doesn't include this
    # in -Wall but gcc does, and it gives false positives.
    cflags += [ "-Wno-maybe-uninitialized" ]
    cflags += [ "-Wno-deprecated-declarations" ]

    # GCC assumes 'this' is never nullptr and optimizes away code
    # like "if (this == nullptr) ...": [1].  However, some
    # code relies on these types of null pointer checks [2], so
    # disable this optimization.
    # [1] https://gcc.gnu.org/gcc-6/porting_to.html#this-cannot-be-null
    # [2] https://crbug.com/784492#c13
    cflags += [ "-fno-delete-null-pointer-checks" ]

    # -Wcomment gives too many false positives in the case a
    # backslash ended comment line is followed by a new line of
    # comments
    # https://gcc.gnu.org/bugzilla/show_bug.cgi?id=61638
    cflags += [ "-Wno-comments" ]
  }

  # Common Clang and GCC warning setup.
  if (!is_win || is_clang) {
    cflags += [
      # Disables.
      "-Wno-missing-field-initializers",  # "struct foo f = {0};"
      "-Wno-unused-parameter",  # Unused function parameters.
    ]
  }

  if (is_mingw) {
    cflags += [
      "-Wno-error=c99-designator",
      "-Wno-error=anon-enum-enum-conversion",
      "-Wno-error=implicit-fallthrough",
      "-Wno-error=sizeof-array-div",
      "-Wno-error=reorder-init-list",
      "-Wno-error=range-loop-construct",
      "-Wno-error=deprecated-copy",
      "-Wno-error=implicit-int-float-conversion",
      "-Wno-error=inconsistent-dllimport",
      "-Wno-error=unknown-warning-option",
      "-Wno-error=abstract-final-class",
      "-Wno-error=sign-compare",
    ]
  }

  if (is_clang) {
    cflags += [
      # This warns on using ints as initializers for floats in
      # initializer lists (e.g. |int a = f(); CGSize s = { a, a };|),
      # which happens in several places in code. Not sure if
      # this is worth fixing.
      "-Wno-c++11-narrowing",
      "-Wno-unneeded-internal-declaration",
    ]
    if (use_musl) {
      cflags += [
        "-Wno-error=c99-designator",
        "-Wno-error=anon-enum-enum-conversion",
        "-Wno-error=implicit-fallthrough",
        "-Wno-error=sizeof-array-div",
        "-Wno-error=reorder-init-list",
        "-Wno-error=range-loop-construct",
        "-Wno-error=deprecated-copy",
        "-Wno-error=implicit-int-float-conversion",
        "-Wno-error=inconsistent-dllimport",
        "-Wno-error=unknown-warning-option",
        "-Wno-error=abstract-final-class",
        "-Wno-error=sign-compare",
        "-Wno-error=int-in-bool-context",
        "-Wno-error=xor-used-as-pow",
        "-Wno-error=return-stack-address",
        "-Wno-error=dangling-gsl",
      ]
    }
  }
}

config("compiler") {
  asmflags = []
  cflags = []
  cflags_c = []
  cflags_cc = []
  cflags_objc = []
  cflags_objcc = []
  ldflags = []
  defines = []
  configs = []
  inputs = []

  # System-specific flags. If your compiler flags apply to one of the
  # categories here, add it to the associated file to keep this shared config
  # smaller.
  if (is_mingw) {
    configs += [ "$build_root/config/mingw:compiler" ]
    cflags += [ "-fno-stack-protector" ]
  }
  if (is_linux || is_ohos) {
    cflags += [ "-fPIC" ]
    ldflags += [ "-fPIC" ]

    if (!is_clang) {
      # Use pipes for communicating between sub-processes. Faster.
      # (This flag doesn't do anything with Clang.)
      cflags += [ "-pipe" ]
    }

    ldflags += [
      "-Wl,-z,noexecstack",
      "-Wl,-z,now",
      "-Wl,-z,relro",
    ]

    # Compiler instrumentation can introduce dependencies in DSOs to symbols in
    # the executable they are loaded into, so they are unresolved at link-time.
    using_sanitizer = false
    is_safestack = false
    if (is_ohos || (!using_sanitizer && !is_safestack)) {
      ldflags += [
        "-Wl,-z,defs",
        "-Wl,--as-needed",
      ]
    }

    # # Change default thread stack size to 2MB for asan.
    if (is_ohos && using_sanitizer) {
      ldflags += [ "-Wl,-z,stack-size=2097152" ]
    }
  }

  configs += [
    # See the definitions below.
    ":compiler_cpu_abi",
    ":compiler_codegen",
  ]

  if (is_linux) {
    cflags += [ "-pthread" ]
    # Do not use the -pthread ldflag here since it becomes a no-op
    # when using -nodefaultlibs, which would cause an unused argument
    # error.  "-lpthread" is added in $build_root/config:default_libs.
  }
  if (is_clang) {
    cflags += [ "-fcolor-diagnostics" ]
    cflags += [ "-fmerge-all-constants" ]
  }

  use_xcode_clang = false
  if (is_clang && !use_xcode_clang) {
    cflags += [
      "-Xclang",
      "-mllvm",
      "-Xclang",
      "-instcombine-lower-dbg-declare=0",
    ]
  }

  if (is_clang) {
    cflags += [ "-no-canonical-prefixes" ]
  }
}

# This provides the basic options to select the target CPU and ABI.
# It is factored out of "compiler" so that special cases can use this
# without using everything that "compiler" brings in.  Options that
# tweak code generation for a particular CPU do not belong here!
# See "compiler_codegen", below.
config("compiler_cpu_abi") {
  cflags = []
  ldflags = []
  defines = []

  if (is_posix && !is_mac) {
    # CPU architecture. We may or may not be doing a cross compile now, so for
    # simplicity we always explicitly set the architecture.
    if (current_cpu == "x64") {
      cflags += [
        "-m64",
        "-march=x86-64",
      ]
      ldflags += [ "-m64" ]
    } else if (current_cpu == "x86") {
      cflags += [ "-m32" ]
      ldflags += [ "-m32" ]
      if (!is_nacl) {
        cflags += [
          "-msse2",
          "-mfpmath=sse",
          "-mmmx",
        ]
      }
    } else if (current_cpu == "arm") {
      if (is_clang && !is_ohos && !is_nacl) {
        cflags += [ "--target=arm-linux-gnueabihf" ]
        ldflags += [ "--target=arm-linux-gnueabihf" ]
      }
      if (!is_nacl) {
        cflags += [
          "-march=$arm_arch",
          "-mfloat-abi=$arm_float_abi",
        ]
      }
      if (arm_tune != "") {
        cflags += [ "-mtune=$arm_tune" ]
      }
    } else if (current_cpu == "arm64") {
      if (is_clang && !is_ohos && !is_nacl) {
        cflags += [ "--target=aarch64-linux-gnu" ]
        ldflags += [ "--target=aarch64-linux-gnu" ]
      }
      if (is_clang && is_ohos) {
        ldflags += [ "-Wl,--hash-style=gnu" ]
      }
      cflags += [
        "-march=$arm_arch",
        "-mfloat-abi=$arm_float_abi",
        "-mfpu=$arm_fpu",
      ]
      ldflags += [ "-march=$arm_arch" ]
    }
  }

  asmflags = cflags
  if (current_cpu == "arm64") {
    asmflags += [ "-march=armv8.2-a+dotprod+fp16" ]
  }
}

config("compiler_codegen") {
  configs = []
  cflags = []

  if (is_posix && !is_mac) {
    if (current_cpu == "x86") {
      if (is_clang) {
        cflags += [ "-momit-leaf-frame-pointer" ]
      }
    } else if (current_cpu == "arm") {
      if (is_ohos && !is_clang) {
        # Clang doesn't support these flags.
        cflags += [
          "-fno-tree-sra",
          "-fno-caller-saves",
        ]
      }
    }
  }

  asmflags = cflags
}
