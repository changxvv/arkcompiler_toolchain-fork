# Copyright (c) 2022 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//arkcompiler/ets_frontend/es2panda/es2abc_config.gni")
import("//arkcompiler/ets_runtime/js_runtime_config.gni")
import("../../../toolchain.gni")

print("root_out_dir=$root_out_dir")
print("root_build_dir=$root_build_dir")
print("root_gen_dir=$root_gen_dir")
print("default_toolchain=$default_toolchain")
print("current_toolchain=$current_toolchain")
print("host_toolchain=$host_toolchain")
print("current_os=$current_os,   current_cpu=$current_cpu")
print("host_os=$host_os,      host_cpu=$host_cpu")
print("target_os=$target_os,    target_cpu=$target_cpu")

print()

group("default") {
  if (host_os != "mac") {
    deps = [
      ":ets_frontend",
      ":ets_runtime",
      ":runtime_core",
      ":toolchain",
    ]
  }
}

group("unittest_packages") {
  testonly = true
  if (host_os != "mac") {
    deps = [ "//arkcompiler/toolchain:ark_js_host_unittest" ]
  }
}

group("ets_runtime") {
  deps = [
    "$js_root:libark_jsruntime($target_toolchain)",
    "$js_root/ecmascript/compiler:ark_aot_compiler($target_toolchain)",
    "$js_root/ecmascript/js_vm:ark_js_vm($target_toolchain)",
    "$js_root/ecmascript/quick_fix:quick_fix($target_toolchain)",
  ]
  if (is_linux) {
    deps +=
        [ "$js_root/ecmascript/compiler:ark_stub_compiler($target_toolchain)" ]
  }
}

group("ets_frontend") {
  deps = []
  if (target_os == "linux" && target_cpu == "x64") {
    deps += [
      "$ets_frontend_root/es2panda:es2panda($target_toolchain)",
      "$ets_frontend_root/merge_abc:merge_abc($target_toolchain)",
      "$ets_frontend_root/ts2panda:ark_ts2abc_build($target_toolchain)",
    ]
  } else if (target_os == "mingw" && target_cpu == "x64") {
    deps += [
      "$ets_frontend_root/es2panda:es2panda($target_toolchain)",
      "$ets_frontend_root/merge_abc:merge_abc($target_toolchain)",
      "$ets_frontend_root/ts2panda:ark_ts2abc_build_win($target_toolchain)",
    ]
  }
}

group("runtime_core") {
  deps = [
    "$ark_root/assembler:ark_asm($target_toolchain)",
    "$ark_root/disassembler:ark_disasm($target_toolchain)",
  ]
}

group("toolchain") {
  deps = []
  if (target_os != "mingw") {
    deps += [
      "$toolchain_root/inspector:ark_debugger($target_toolchain)",
      "$toolchain_root/inspector:connectserver_debugger($target_toolchain)",
      "$toolchain_root/tooling:libark_ecma_debugger($target_toolchain)",
    ]
  }
}
